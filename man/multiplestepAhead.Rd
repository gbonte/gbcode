% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mstep.R
\name{multiplestepAhead}
\alias{multiplestepAhead}
\title{multiplestepAhead}
\arguments{
\item{TS:}{time series in column format [T,1]}

\item{n:}{embedding order}

\item{H:}{horizon}

\item{dist:}{type of distance: \code{euclidean, cosine} for lazy methods}

\item{F:}{forgetting factor}

\item{C:}{integer parameter which sets the maximum number of neighbours (C*k) for lazy methods}

\item{detrend:}{real parameter (in [0,1]) which fixes the size of window used for linear detrending the series (0 corresponds to all series and 1 to ten latest terms). If detrend<0  no detrending is carried out}

\item{smooth:}{if TRUE, the prediction is obtained by averaging multiple windows with different starting points}

\item{engin:}{if TRUE, a number of additional features (related to the quantiles) are engineered and added}

\item{method:}{\itemize{
\item{arima}: prediction based on the \pkg{forecast} package
\item{stat_naive}: naive predictor based on the M4 competition code
\item{stat_ses_naive}: prediction based on the M4 competition code
\item{stat_naive2}: naive predictor based on the M4 competition code
\item{stat_ses}: SES predictor based on the M4 competition code
\item{stat_holt}: Holt predictor based on the M4 competition code
\item{stat_damped}: prediction based on the M4 competition code
\item{stat_theta}: Theta predictor based on the M4 competition code
\item{stat_comb}: prediction based on the M4 competition code
\item{direct}: direct prediction based on \link{KNN.multioutput} function
\item{iter}: recursive prediction based on \link{KNN.multioutput} function
\item{lazydirect}: locally linear  direct prediction based on \link{lazy.pred} function
\item{clazydirect}: locally constant direct prediction based on \link{lazy.pred} function
\item{lazyiter}: recursive prediction based on \link{lazy.pred} function
\item{lindirect}: direct prediction based on linear predictor
\item{rfdirect}: direct prediction based on Random Forest predictor
\item{rfiter}: recursive prediction based on Random Forest predictor
\item{mimo}: MIMO prediction based on \link{KNN.multioutput} function
\item{mimo.comb}: MIMO prediction based on \link{KNN.multioutput} function which combines a set of predictors based on different horizons and different starting points
\item{mimo.acf}: MIMO prediction based on \link{KNN.acf} function which combines a set of predictors based on different horizons and different starting points
\item{mimo.acf.lin}: MIMO prediction based on \link{KNN.acf.lin} function which combines a set of predictors based on different horizons and different starting points
\item{mimo.pls}: MIMO prediction based on \link{KNN.pls} function which combines a set of predictors based on different horizons and different starting points
\item{mimo.lin.pls}: MIMO prediction based on Partial Least Squares which combines a set of predictors based on different horizons and different starting points
\item{mimo_rr}: MIMO prediction based on linear ridge regression 
\item{mimo_red}: MIMO prediction based on linear reduced rank regression (\pkg{rrpack})
\item{mimo_las}: MIMO prediction based on linear lasso regression based on python (\pkg{reticulate})  
\item{mimo_cca}: MIMO prediction based on linear canonical correlation 
\item{mimo_red}: MIMO prediction based on linear reduced rank regression 
\item{rnn}:  prediction based on python (\pkg{reticulate})  implementation of rnn (recurrent neural networks)
\item{lstm}:  prediction based on python (\pkg{reticulate})  implementation of lstm neural networks
\item{transf}:  prediction based on python (\pkg{reticulate})  implementation of transformer neural networks
}}
}
\value{
H step ahead predictions
}
\description{
multiplestepAhead: : univariate multi-step-ahead forecaster
}
\details{
multiplestepAhead

Wrapper over a set of methods for univariate multi-step-ahead time series forecasting


The python forecasters require the installation of \pkg{reticulate} and several python packages (scikit-learn, tensorflow, keras)
}
\examples{
## Multi-step ahead time series forecasting

rm(list=ls())
t=seq(0,400,by=0.1)
N<-length(t)
H<-500 ## horizon prediction
TS<-sin(t)+rnorm(N,sd=0.1)
TS.tr=TS[1:(N-H)]
N.tr<-length(TS.tr)
TS.ts<-TS[(N-H+1):N]
TS.tr=array(TS.tr,c(length(TS.tr),1))
Y.cont=multiplestepAhead(TS.tr,n=3, H=H,method="mimo")

plot(t[(N-H+1):N],TS.ts)
lines(t[(N-H+1):N],Y.cont,col="red")




## Multi-step ahead time series forecasting Santa Fe  chaotic time series A
rm(list=ls())
require(gbcode)
data(A)
TS=A
N<-1000
H<-200
TS.tr=TS[1:N,1]
TS.ts<-TS[(N+1):(N+H),1]
TS.tr=array(TS.tr,c(length(TS.tr),1))
Y.dir=multiplestepAhead(TS.tr,n=12, H=H,method="lazydirect")
Y.mimo.comb=multiplestepAhead(TS.tr,n=12, H=H,method="mimo.comb")
plot((N-H+1):N,TS.ts,type="l",xlab="",ylab="Santa Fe A series")
lines((N-H+1):N,Y.dir,col="red")
lines((N-H+1):N,Y.mimo.comb,col="green")



}
\references{
\emph{Bontempi G. Ben Taieb S. Conditionally dependent strategies for multiple-step-ahead prediction in local learning, International Journal of Forecasting Volume 27, Issue 3, July–September 2011, Pages 689–699}

\url{https://tinyurl.com/sfmlh}
}
\author{
Gianluca Bontempi  \email{Gianluca.Bontempi@ulb.be}
}
